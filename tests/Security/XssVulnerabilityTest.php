<?php

namespace App\Tests\Security;

use App\Service\FeedParserService;
use PHPUnit\Framework\TestCase;

/**
 * Comprehensive XSS vulnerability test suite
 * 
 * This test suite verifies that the FeedParserService.normalizeContent() method 
 * properly blocks all XSS attack vectors identified in the security analysis.
 */
class XssVulnerabilityTest extends TestCase
{
    private FeedParserService $feedParser;

    protected function setUp(): void
    {
        $this->feedParser = new FeedParserService();
    }

    /**
     * Test AC1: Malicious script tags are completely removed from RSS content
     */
    public function testScriptTagsRemoved(): void
    {
        $maliciousContent = '<script>alert("XSS")</script><p>Safe content</p>';
        $result = $this->feedParser->normalizeContent($maliciousContent);
        
        $this->assertStringNotContainsString('<script>', $result);
        $this->assertStringNotContainsString('alert("XSS")', $result);
        $this->assertStringContainsString('<p>Safe content</p>', $result);
    }

    /**
     * Test AC2: Event handler attributes are stripped from all HTML elements
     */
    public function testEventHandlerAttributesRemoved(): void
    {
        $testCases = [
            // Double-quoted event handlers
            '<img src="x" onerror="alert(\'XSS\')">' => '<img src="x" />',
            '<div onclick="alert(1)">Click me</div>' => '<div>Click me</div>',
            // Single-quoted event handlers
            '<img src="x" onerror=\'alert("XSS")\'>' => '<img src="x" />',
            // Unquoted event handlers
            '<img src=x onerror=alert(1)>' => '<img src="x" />',
            // Mixed case bypasses
            '<img src="x" OnError="alert(1)">' => '<img src="x" />',
            '<img src="x" ONLOAD="alert(1)">' => '<img src="x" />',
        ];

        foreach ($testCases as $input => $expected) {
            $result = $this->feedParser->normalizeContent($input);
            $this->assertStringNotContainsString('alert', $result, "Failed for input: $input");
            $this->assertStringNotContainsString('onerror', strtolower($result), "Failed for input: $input");
            $this->assertStringNotContainsString('onclick', strtolower($result), "Failed for input: $input");
            $this->assertStringNotContainsString('onload', strtolower($result), "Failed for input: $input");
        }
    }

    /**
     * Test AC3: JavaScript URLs are blocked in href and src attributes
     */
    public function testJavaScriptUrlsBlocked(): void
    {
        $testCases = [
            // Basic javascript URLs
            '<a href="javascript:alert(\'XSS\')">Click</a>',
            '<img src="javascript:alert(1)">',
            // HTML entity encoded URLs
            '<a href="&#106;&#97;&#118;&#97;&#115;&#99;&#114;&#105;&#112;&#116;&#58;alert(1)">Click</a>',
            // Alternative protocols
            '<a href="vbscript:alert(1)">Click</a>',
            '<a href="data:text/html,<script>alert(1)</script>">Click</a>',
            // Mixed case
            '<a href="JavaScript:alert(1)">Click</a>',
            '<a href="JAVASCRIPT:alert(1)">Click</a>',
        ];

        foreach ($testCases as $input) {
            $result = $this->feedParser->normalizeContent($input);
            $this->assertStringNotContainsString('javascript:', strtolower($result), "Failed for input: $input");
            $this->assertStringNotContainsString('vbscript:', strtolower($result), "Failed for input: $input");
            $this->assertStringNotContainsString('alert', $result, "Failed for input: $input");
        }
    }

    /**
     * Test AC4: Only whitelisted HTML elements are preserved
     */
    public function testOnlyWhitelistedElementsPreserved(): void
    {
        $allowedElements = [
            '<p>Paragraph</p>',
            '<br>',
            '<strong>Bold</strong>',
            '<em>Italic</em>',
            '<b>Bold</b>',
            '<i>Italic</i>',
            '<u>Underlined</u>',
            '<a href="https://example.com" title="Example">Link</a>',
            '<img src="https://example.com/image.jpg" alt="Image" title="Title" width="100" height="200">',
            '<ul><li>Item</li></ul>',
            '<ol><li>Item</li></ol>',
            '<h1>Header</h1>',
            '<h2>Header</h2>',
            '<h3>Header</h3>',
            '<h4>Header</h4>',
            '<h5>Header</h5>',
            '<h6>Header</h6>',
            '<blockquote>Quote</blockquote>',
            '<pre>Preformatted</pre>',
            '<code>Code</code>',
        ];

        $forbiddenElements = [
            '<script>alert(1)</script>',
            '<style>body{display:none}</style>',
            '<object data="malicious.swf"></object>',
            '<embed src="malicious.swf">',
            '<iframe src="malicious.html"></iframe>',
            '<form><input type="text"></form>',
            '<textarea>text</textarea>',
            '<select><option>Option</option></select>',
            '<button onclick="alert(1)">Click</button>',
            '<svg onload="alert(1)">',
            '<math><mi>x</mi></math>',
            '<canvas></canvas>',
            '<audio controls><source src="audio.mp3"></audio>',
            '<video controls><source src="video.mp4"></video>',
        ];

        // Test allowed elements are preserved
        foreach ($allowedElements as $element) {
            $result = $this->feedParser->normalizeContent($element);
            $this->assertNotEmpty($result, "Allowed element was removed: $element");
        }

        // Test forbidden elements are removed
        foreach ($forbiddenElements as $element) {
            $result = $this->feedParser->normalizeContent($element);
            $this->assertStringNotContainsString('<script>', $result, "Forbidden element not removed: $element");
            $this->assertStringNotContainsString('<style>', $result, "Forbidden element not removed: $element");
            $this->assertStringNotContainsString('<object>', $result, "Forbidden element not removed: $element");
            $this->assertStringNotContainsString('<embed>', $result, "Forbidden element not removed: $element");
            $this->assertStringNotContainsString('<iframe>', $result, "Forbidden element not removed: $element");
            $this->assertStringNotContainsString('<form>', $result, "Forbidden element not removed: $element");
            $this->assertStringNotContainsString('<svg>', $result, "Forbidden element not removed: $element");
            $this->assertStringNotContainsString('<math>', $result, "Forbidden element not removed: $element");
            $this->assertStringNotContainsString('<canvas>', $result, "Forbidden element not removed: $element");
            $this->assertStringNotContainsString('<audio>', $result, "Forbidden element not removed: $element");
            $this->assertStringNotContainsString('<video>', $result, "Forbidden element not removed: $element");
        }
    }

    /**
     * Test AC5: Nested and malformed HTML is properly handled
     */
    public function testNestedAndMalformedHtml(): void
    {
        $testCases = [
            // Nested script tags
            '<div><script>alert("XSS")</script></div>',
            '<p><script><!--</script>alert(1)--></p>',
            // Complex nested attacks
            '<div><img src="x" onerror="alert(1)"><script>alert(2)</script></div>',
            // Malformed HTML
            '<script<script>alert(1)</script>',
            '<img src="x" onerror="alert(1)" onload="alert(2)">',
            // SVG with script
            '<svg><script>alert(1)</script></svg>',
            // CSS expressions
            '<div style="background:url(javascript:alert(1))">Content</div>',
            '<div style="expression(alert(1))">Content</div>',
        ];

        foreach ($testCases as $input) {
            $result = $this->feedParser->normalizeContent($input);
            $this->assertStringNotContainsString('alert', $result, "Failed for input: $input");
            $this->assertStringNotContainsString('<script>', $result, "Failed for input: $input");
            $this->assertStringNotContainsString('javascript:', strtolower($result), "Failed for input: $input");
            $this->assertStringNotContainsString('expression(', strtolower($result), "Failed for input: $input");
        }
    }

    /**
     * Test AC-Edge1: Empty or null content is handled gracefully
     */
    public function testEmptyContentHandling(): void
    {
        $this->assertSame('', $this->feedParser->normalizeContent(''));
        $this->assertSame('', $this->feedParser->normalizeContent('   '));
    }

    /**
     * Test AC-Edge2: Extremely large content does not cause memory issues
     */
    public function testLargeContentHandling(): void
    {
        $largeContent = str_repeat('<p>Large content block. ', 10000) . '</p>';
        $result = $this->feedParser->normalizeContent($largeContent);
        
        $this->assertNotEmpty($result);
        $this->assertStringContainsString('<p>', $result);
        $this->assertStringContainsString('Large content block.', $result);
    }

    /**
     * Test that legitimate content is preserved
     */
    public function testLegitimateContentPreserved(): void
    {
        $legitimateContent = '<p>Test <strong>bold</strong> and <em>italic</em> text with <a href="https://example.com">link</a> and <img src="https://example.com/image.jpg" alt="image"></p>';
        
        $result = $this->feedParser->normalizeContent($legitimateContent);
        
        $this->assertStringContainsString('<p>', $result);
        $this->assertStringContainsString('<strong>bold</strong>', $result);
        $this->assertStringContainsString('<em>italic</em>', $result);
        $this->assertStringContainsString('<a href="https://example.com"', $result);
        $this->assertStringContainsString('>link</a>', $result);
        $this->assertStringContainsString('<img', $result);
        $this->assertStringContainsString('src="https://example.com/image.jpg"', $result);
        $this->assertStringContainsString('alt="image"', $result);
    }

    /**
     * Test specific attack vectors from the security analysis
     */
    public function testSpecificAttackVectors(): void
    {
        $attackVectors = [
            // 1. Single-quoted event handlers
            '<img src="x" onerror=\'alert("XSS")\'>',
            // 2. Unquoted event handlers
            '<img src=x onerror=alert(1)>',
            // 3. HTML entity encoded URLs
            '<a href="&#106;&#97;&#118;&#97;&#115;&#99;&#114;&#105;&#112;&#116;&#58;alert(1)">Click</a>',
            // 4. Data URLs with scripts
            '<img src="data:text/html,<script>alert(1)</script>">',
            // 5. Alternative protocols
            '<a href="vbscript:alert(1)">Click</a>',
            // 6. Mixed case bypasses
            '<img src="x" OnError="alert(1)">',
            // 7. Complex nested attacks
            '<div><script><!--</script>alert(1)--></div>',
            // 8. SVG with script
            '<svg onload="alert(1)">',
            // 9. Form with autofocus
            '<input onfocus="alert(1)" autofocus>',
            // 10. CSS expression injection
            '<div style="background:url(javascript:alert(1))">Content</div>',
        ];

        foreach ($attackVectors as $attack) {
            $result = $this->feedParser->normalizeContent($attack);
            $this->assertStringNotContainsString('alert', $result, "Attack vector not blocked: $attack");
            $this->assertStringNotContainsString('javascript:', strtolower($result), "Attack vector not blocked: $attack");
            $this->assertStringNotContainsString('vbscript:', strtolower($result), "Attack vector not blocked: $attack");
            $this->assertStringNotContainsString('<script>', $result, "Attack vector not blocked: $attack");
            $this->assertStringNotContainsString('<svg>', $result, "Attack vector not blocked: $attack");
            $this->assertStringNotContainsString('<input>', $result, "Attack vector not blocked: $attack");
        }
    }

    /**
     * Test URL scheme validation
     */
    public function testUrlSchemeValidation(): void
    {
        $validUrls = [
            '<a href="https://example.com">HTTPS Link</a>',
            '<a href="http://example.com">HTTP Link</a>',
            '<img src="https://example.com/image.jpg">',
            '<img src="http://example.com/image.jpg">',
        ];

        $invalidUrls = [
            '<a href="javascript:alert(1)">JS Link</a>',
            '<a href="data:text/html,<script>alert(1)</script>">Data Link</a>',
            '<a href="vbscript:alert(1)">VBScript Link</a>',
            '<a href="file:///etc/passwd">File Link</a>',
            '<a href="ftp://example.com/file">FTP Link</a>',
            '<img src="javascript:alert(1)">',
            '<img src="data:text/html,<script>alert(1)</script>">',
        ];

        // Test valid URLs are preserved
        foreach ($validUrls as $url) {
            $result = $this->feedParser->normalizeContent($url);
            $this->assertNotEmpty($result, "Valid URL was removed: $url");
        }

        // Test invalid URLs are blocked
        foreach ($invalidUrls as $url) {
            $result = $this->feedParser->normalizeContent($url);
            $this->assertStringNotContainsString('javascript:', strtolower($result), "Invalid URL not blocked: $url");
            $this->assertStringNotContainsString('vbscript:', strtolower($result), "Invalid URL not blocked: $url");
            $this->assertStringNotContainsString('file:', strtolower($result), "Invalid URL not blocked: $url");
            $this->assertStringNotContainsString('ftp:', strtolower($result), "Invalid URL not blocked: $url");
        }
    }

    /**
     * Performance benchmark test
     */
    public function testPerformanceBenchmark(): void
    {
        $testContent = str_repeat('<p>Performance test content with <strong>formatting</strong> and <a href="https://example.com">links</a>. ', 1000);
        
        $startTime = microtime(true);
        $result = $this->feedParser->normalizeContent($testContent);
        $endTime = microtime(true);
        
        $processingTime = ($endTime - $startTime) * 1000; // Convert to milliseconds
        
        $this->assertNotEmpty($result);
        $this->assertLessThan(100, $processingTime, "Processing time exceeded 100ms: {$processingTime}ms");
    }
}